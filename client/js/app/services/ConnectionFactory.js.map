{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","banco","connection","close","ConnectionFactory","forEach","objectStoreNames","contains","store","deleteObjectStore","console","log","createObjectStore","autoIncrement","objectStore","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","Error","onerror","error","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,iB,GAAQ,Y;AAEVC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAO,sDAAP;AACH;;;;kDAwCaF,U,EAAY;;AAEtBH,+BAAOM,OAAP,CAAe,iBAAS;;AAEpB,gCAAIH,WAAWI,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;;AAE7CN,2CAAWO,iBAAX,CAA6BD,KAA7B;AACAE,wCAAQC,GAAR,CAAY,iBAAiBH,KAAjB,GAAyB,YAArC;AACH;;AAEDN,uCAAWU,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,yBATD;AAUH;;;kDAlDoBC,W,EAAa;;AAE9B,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBpB,KAAtB,EAA6BD,OAA7B,CAAlB;;AAEAkB,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BlB,kDAAkBmB,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzBjB,wCAAQC,GAAR,CAAY,6BAAZ;AACA,oCAAI,CAACT,UAAL,EAAiB;;AAEbA,iDAAasB,EAAEC,MAAF,CAASC,MAAtB;;AAEAvB,4CAAQD,WAAWC,KAAX,CAAiByB,IAAjB,CAAsB1B,UAAtB,CAAR;;AAEAA,+CAAWC,KAAX,GAAmB,YAAM;AAAE,8CAAM,IAAI0B,KAAJ,CAAU,iCAAV,CAAN;AAAoD,qCAA/E;AAEH;AACDb,wCAAQd,UAAR;AACH,6BAbD;;AAeAgB,wCAAYY,OAAZ,GAAsB,aAAK;;AAEvBpB,wCAAQC,GAAR,CAAYa,EAAEC,MAAF,CAASM,KAArB;AACAd,uCAAOP,QAAQC,GAAR,CAAYa,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAA3B,CAAP;AACH,6BAJD;AAOH,yBAhCM,CAAP;AAkCH;;;sDAgBwB;;AAErB,4BAAI9B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 3;\nconst banco = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw ('Nao e possivel criar instancias de ConnectionFactory');\n    }\n\n    static getConnection(objectStore) {\n\n        return new Promise((resolve, reject) => {\n\n            //var conection;\n            var openRequest = window.indexedDB.open(banco, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n\n                console.log('Conexao obtida com sucesso.');\n                if (!connection) {\n\n                    connection = e.target.result;\n\n                    close = connection.close.bind(connection);\n\n                    connection.close = () => { throw new Error('Voce nao pode fechar a conexao.') };\n\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error)\n                reject(console.log(e.target.error.name));\n            }\n\n\n        });\n\n    };\n\n    _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store)) {\n\n                connection.deleteObjectStore(store);\n                console.log('ObjectStore ' + store + ' deletada.');\n            }\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n            close;\n            connection = null;\n        }\n    }\n}\n\n\n"]}