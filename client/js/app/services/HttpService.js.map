{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAI;AACd,4BAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,+BAAOH,GAAP;AACH;;;wCAEII,G,EAAI;AAAA;;AAEL,+BAAOC,MAAMD,GAAN,EACEE,IADF,CACO;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADP,EAEEM,IAFF,CAEO;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFP,CAAP;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCH;;;yCAEIJ,G,EAAKK,I,EAAK;AAAA;;AAEX,+BAAOJ,MAAMD,GAAN,EAAW;AACNM,qCAAS,EAAC,gBAAiB,kBAAlB,EADH;AAENC,oCAAQ,MAFF;AAGNC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHA,yBAAX,EAKEH,IALF,CAKO;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALP,EAMEM,IANF,CAMO;AAAA,mCAAON,GAAP;AAAA,yBANP,CAAP;AASH","file":"HttpService.js","sourcesContent":["export class HttpService{\n\n    _handleErrors(res){\n        if (!res.ok) throw new Error(res.statusText);\n        return res;\n    }\n\n    get (url){\n       \n        return fetch(url)\n                .then(res => this._handleErrors(res))\n                .then(res => res.json());\n\n\n        /*\n        return new Promise( (resolve, reject) => {\n\n            let xhr = new XMLHttpRequest();\n    \n            xhr.open('GET', url);\n    \n            xhr.onreadystatechange = () => {\n                /*\n                0 - Requisicao ainda nao iniciada \n                1 - Conexao com o servidor estabelecida\n                2 - Requisicao recebida\n                3 - Processando requisicao\n                4 - Requisicao concluida\n                *                \n                if (xhr.readyState == 4) {\n    \n                    if (xhr.status == 200) {\n    \n                       resolve(JSON.parse(xhr.responseText).map(item => new Negociacao(new Date(item.data), item.quantidade, item.valor)));                        \n                        \n                    } else {\n                                                \n                        reject(xhr.responseText);\n                    };\n                };\n            };\n    \n            xhr.send();\n\n            \n\n        });\n        */\n    }\n\n    post(url, dado){\n\n        return fetch(url, {\n                    headers: {'content-type' : 'application/json'},\n                    method: 'post',\n                    body: JSON.stringify(dado)\n                })\n                .then(res => this._handleErrors(res))\n                .then(res => res);\n\n\n    }\n\n}"]}